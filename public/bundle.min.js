import De from"../node_modules/express/index.js";import Se from"../node_modules/cors/lib/index.js";import Ie from"../node_modules/body-parser/index.js";import Ae from"../node_modules/mongoose/index.js";import Ee from"../node_modules/dotenv/lib/main.js";import ae from"../node_modules/jsonwebtoken/index.js";var v=(n=>(n[n.INTERNAL_SERVER_ERROR=1e3]="INTERNAL_SERVER_ERROR",n[n.TOKEN_NOT_DEFINED=1100]="TOKEN_NOT_DEFINED",n[n.TOKEN_EXPIRED=1101]="TOKEN_EXPIRED",n[n.INVALID_TOKEN=1102]="INVALID_TOKEN",n[n.UNAUTHORIZED=1103]="UNAUTHORIZED",n[n.NO_PERMISSION=1104]="NO_PERMISSION",n[n.INVALID_PASSWORD=1105]="INVALID_PASSWORD",n[n.INVALID_CREDENTIALS=1106]="INVALID_CREDENTIALS",n[n.SESSION_EXPIRED=1107]="SESSION_EXPIRED",n[n.SESSION_UNAVAILABLE=1108]="SESSION_UNAVAILABLE",n[n.FIELD_REQUIRED=1200]="FIELD_REQUIRED",n[n.INVALID_FIELD_FORMAT=1201]="INVALID_FIELD_FORMAT",n[n.MISSING_PARAMETER=1202]="MISSING_PARAMETER",n[n.INVALID_INPUT=1203]="INVALID_INPUT",n[n.TOO_MANY_REQUESTS=1204]="TOO_MANY_REQUESTS",n[n.RESOURCE_NOT_FOUND=1300]="RESOURCE_NOT_FOUND",n[n.RESOURCE_ALREADY_EXISTS=1301]="RESOURCE_ALREADY_EXISTS",n[n.ENV_VARIABLE_NOT_DEFINED=1400]="ENV_VARIABLE_NOT_DEFINED",n[n.MISSING_DATABASE_URL=1401]="MISSING_DATABASE_URL",n[n.MISSING_JWT_SECRET=1402]="MISSING_JWT_SECRET",n[n.EXTERNAL_API_ERROR=1500]="EXTERNAL_API_ERROR",n[n.EXTERNAL_API_UNAUTHORIZED=1501]="EXTERNAL_API_UNAUTHORIZED",n[n.MONGO_ERROR=1600]="MONGO_ERROR",n))(v||{}),p=v;var T=[],q=t=>{t&&T.push(t)},f=(t,e,s)=>{let r=t.headers.authorization?.split(" ")[1];if(!r)return e.status(401).json({error:!0,type:"unauthorized",message:"Please log in."});if(T.includes(r))return e.status(401).json({error:!0,type:"token_blacklisted"});if(!process.env.JWT_SECRET)return e.status(500).json({error:!0,type:"server_error",code:p.ENV_VARIABLE_NOT_DEFINED});ae.verify(r,process.env.JWT_SECRET,(o,i)=>{if(o)return o.name==="TokenExpiredError"?e.status(401).json({error:!0,type:"token_expired"}):e.status(401).json({error:!0,type:"invalid_token"});if(!i||typeof i!="object"||!("username"in i))return e.status(401).json({error:!0,type:"invalid_token"});t.user=i.username,s()})};import{body as D}from"../node_modules/express-validator/lib/index.js";var b=[D("name").isLength({min:6,max:50}).custom(t=>{if(!t)throw new Error("name_required");return!0}),D("username").isLength({min:6,max:30}).custom(t=>{if(!t)throw new Error("username_required");return!0}),D("email").isEmail().custom(t=>{if(!t)throw new Error("email_required");return!0}).normalizeEmail(),D("password").custom(t=>{let e=[];if(t?(t.length<8&&e.push("password_too_short"),/[a-z]/.test(t)||e.push("password_no_lowercase"),/[A-Z]/.test(t)||e.push("password_no_uppercase"),/[0-9]/.test(t)||e.push("password_no_number"),/[\W_]/.test(t)||e.push("password_no_special")):e.push("password_required"),e.length)throw new Error(e.join(","));return!0})];import ce from"../node_modules/jsonwebtoken/index.js";import j from"../node_modules/mongoose/index.js";var ie=new j.Schema({username:{type:String,required:!0,unique:!0},lastActivity:{type:Date,required:!0},token:{type:String}}),ue=j.model("Session",ie),g=ue;import w from"../node_modules/winston/lib/winston.js";var pe=w.createLogger({level:"info",format:w.format.combine(w.format.colorize(),w.format.simple()),transports:[new w.transports.Console]}),a=pe;var R=async(t,e,s)=>{let r=t.headers.authorization?.split(" ")[1];if(!r)return e.status(401).json({errror:!0,type:"unauthorized",code:p.MISSING_JWT_SECRET});if(!process.env.JWT_SECRET)return e.status(401).json({errror:!0,type:"unauthorized",code:p.ENV_VARIABLE_NOT_DEFINED});let o={error:!0,type:"server_error"};try{let l=ce.verify(r,process.env.JWT_SECRET).username,c=await g.findOne({username:l});if(!c)return e.status(401).json({...o,code:p.SESSION_UNAVAILABLE});let m=new Date,d=24*60*60*1e3;if(m.getTime()-c.lastActivity.getTime()>d)return await g.deleteOne({username:l}),e.status(401).json({...o,code:p.SESSION_EXPIRED});c.lastActivity=m,await c.save(),s()}catch(i){return a.error(i),e.status(401).json({errorRes:o,code:p.INTERNAL_SERVER_ERROR})}};import P from"../node_modules/mongoose/index.js";var x=new P.Schema({indexSymbol:{type:String,required:!0,trim:!0},current:{type:Number,required:!0},percentChange:{type:Number,required:!0},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}});x.pre("save",function(t){this.updatedAt=new Date,t()});var de=P.model("Index",x,"indices"),E=de;var k=async(t,e)=>{let s=["NIFTY 50","NIFTY BANK"];try{let r=await E.find({indexSymbol:{$in:s}}).lean().select("-_id -__v -createdAt -updatedAt");e.status(200).json(r)}catch(r){r instanceof Error&&e.status(500).json({error:r.message})}},M=async(t,e)=>{let s=t.body;try{await Promise.all(s.map(async r=>{await E.updateOne({indexSymbol:r.indexSymbol},{$set:{current:r.current,percentChange:r.percentChange,updatedAt:Date.now()},$setOnInsert:{createdAt:Date.now()}},{upsert:!0})})),e.status(200).json({message:"Indices data saved successfully!"})}catch(r){let o="Error saving indices data";return r instanceof Error&&(o+=r.message),a.error(o),e.status(500).json({message:"Error saving indices data"})}};import U from"../node_modules/mongoose/index.js";var L=new U.Schema({symbol:{type:String,required:!0,trim:!0},lastPrice:{type:Number,required:!0},change:{type:Number,required:!0},pChange:{type:Number,required:!0},previousClose:{type:Number,required:!0},open:{type:Number,required:!0},close:{type:Number,required:!0},basePrice:{type:Number,required:!0},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}});L.pre("save",function(t){this.updatedAt=new Date,t()});var me=U.model("MarketData",L,"marketdata"),N=me;var B=async(t,e)=>{let s=t.body;try{await Promise.all(s.map(async r=>{await N.updateOne({symbol:r.symbol},{$set:{lastPrice:r.lastPrice,change:r.change,pChange:r.pChange,previousClose:r.previousClose,open:r.open,close:r.close,basePrice:r.basePrice,updatedAt:Date.now()},$setOnInsert:{createdAt:Date.now()}},{upsert:!0})})),e.status(200).json({message:"Data saved successfully!"})}catch(r){return e.status(500).json({message:"Error saving data",error:r})}};var V=async(t,e)=>{try{let s=await N.find({}).lean().select("-_id -__v -createdAt -updatedAt");e.status(200).json(s)}catch(s){e.status(500).json({message:"Error retrieving market data",error:s})}};import O from"../node_modules/mongoose/index.js";var le=new O.Schema({dateAdded:{type:Date,required:!0,get:t=>new Date(t)},quantity:{type:Number,required:!0},avgPrice:{type:Number,required:!0},exchange:{type:String,required:!0,trim:!0},isGift:{type:Boolean,required:!1},isIPO:{type:Boolean,required:!1}},{_id:!1}),$=new O.Schema({symbol:{type:String,required:!0,trim:!0},transactions:{type:[le],required:!0},userId:{type:String,required:!0,trim:!0},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}});$.pre("save",function(t){this.updatedAt=new Date,t()});var fe=O.model("Holding",$,"holdings"),_=fe;var H=async(t,e)=>{try{let s=await _.find({userId:t.user}).lean().select("-_id -__v -createdAt -updatedAt -userId");if(!s)return e.status(404).json({message:"No holdings found for this user."});if(s.length===0)return e.status(200).json([]);let r=s.map(o=>({...o,transactions:o.transactions.map(i=>({...i,dateAdded:new Date(i.dateAdded).getTime()}))}));e.json(r)}catch(s){a.error(s),e.status(500).json({message:"Server error while fetching holdings",error:s})}},F=async(t,e)=>{try{let s=await _.distinct("symbol");if(!s||s.length===0)return e.status(200).json({nse:[]});let r={nse:s};return e.json(r)}catch(s){return e.status(500).json(s)}},G=async(t,e)=>{let{symbol:s,dateAdded:r,quantity:o,avgPrice:i,exchange:l="NSE",isGift:c=!1,isIPO:m=!1}=t.body;try{let d={dateAdded:new Date(r),quantity:o,avgPrice:i,exchange:l,isGift:c,isIPO:m},y=await _.findOne({symbol:s,userId:t.user});y?y.transactions.push(d):y=new _({symbol:s,transactions:[d],userId:t.user}),await y.save(),e.status(200).send({message:`Holding ${s} added successfully!`})}catch(d){a.error(d),e.status(500).send(`Server error while adding holding, ${d}`)}},W=async(t,e)=>{let s=t.body;if(!Array.isArray(s)||s.length===0)return e.status(400).send("Invalid data. Expected an array of holdings.");let r=s.map(o=>{let{symbol:i,dateAdded:l,quantity:c,avgPrice:m,exchange:d="NSE",isGift:y=!1,isIPO:A=!1}=o;return{updateOne:{filter:{symbol:i,userId:t.user},update:{$setOnInsert:{symbol:i,userId:t.user,createdAt:Date.now()},$push:{transactions:{dateAdded:new Date(l),quantity:c,avgPrice:m,exchange:d,isGift:y,isIPO:A}},$set:{updatedAt:Date.now()}},upsert:!0}}});try{let o=await _.bulkWrite(r);e.status(200).json({message:`Holdings uploaded successfully! Inserted: ${o.upsertedCount}, Modified: ${o.modifiedCount}`})}catch(o){a.error(o),e.status(500).send(`Server error while uploading holdings, ${o}`)}};import{MongoError as Y}from"../node_modules/mongodb/lib/index.js";import S from"../node_modules/mongoose/index.js";var ge=new S.Schema({visibleColumns:{type:[Number],default:[]},sortColumn:{type:Number,default:1},sortOrder:{type:Number,default:1}},{_id:!1}),J=new S.Schema({dashboard:{type:ge}},{_id:!1}),z=new S.Schema({mobile:{type:J},computer:{type:J},userId:{type:String,required:!0,trim:!0},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}});z.pre("save",function(t){this.updatedAt=new Date,t()});var ye=S.model("Preference",z),I=ye;import X from"../node_modules/mongoose/index.js";var K=new X.Schema({name:{type:String,required:!0,trim:!0},email:{type:String,required:!0,trim:!0,unique:!0},username:{type:String,required:!0,unique:!0,trim:!0,minlength:6,maxlength:50},password:{type:String,required:!0,minlength:6},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}});K.pre("save",function(t){this.updatedAt=new Date,t()});var Re=X.model("User",K),h=Re;var Z=async(t,e)=>{let s=t.user;try{let r=await h.findOne({username:s});if(!r)return e.status(404).json({error:!0,type:"user_not_found"});e.status(200).json({name:r.name})}catch(r){return a.error(r),e.status(500).json({error:!0,type:"server_error"})}},Q=async(t,e)=>{let s=t.user;try{let r=await I.findOne({userId:s})?.lean().select("-_id -__v -createdAt -updatedAt -userId");if(!r)return e.status(200).json({});e.status(200).json(r)}catch(r){return a.error(r),r instanceof Y&&r.name==="CastError"?e.status(400).json({error:!0,type:"invalid_user_id"}):e.status(500).json({error:!0,type:"server_error"})}},C=async(t,e)=>{let s=t.body,r=t.user;try{let o=await I.findOne({userId:r});o?(o.set(s),o.updatedAt=new Date):o=new I({userId:r,...s,createdAt:Date.now(),updatedAt:Date.now()}),await o.save(),e.status(200).send({message:"Preferences updated successfully!"})}catch(o){if(a.error(o),o instanceof Y){if(o.name==="ValidationError")return e.status(400).json({error:!0,type:"invalid_data",code:p.MONGO_ERROR});if(o.name==="CastError")return e.status(400).json({error:!0,type:"invalid_user_id",code:p.MONGO_ERROR});if(o.code===11e3)return e.status(409).json({error:!0,type:"duplicate_preferences",code:p.MONGO_ERROR})}return e.status(500).json({error:!0,type:"server_error"})}};import{validationResult as he}from"../node_modules/express-validator/lib/index.js";import ee from"../node_modules/bcrypt/bcrypt.js";import te from"../node_modules/jsonwebtoken/index.js";import{MongoError as _e}from"../node_modules/mongodb/lib/index.js";var re=async(t,e)=>{let{username:s,password:r,email:o,name:i}=t.body,l=he(t);if(!process.env.JWT_SECRET)return e.status(500).json({error:!0,type:"server_error",code:p.ENV_VARIABLE_NOT_DEFINED});if(!l.isEmpty()){let c=l.array().flatMap(m=>m.msg.includes(",")?m.msg.split(",").map(d=>({type:d})):[{type:m.msg}]);return e.status(400).json({error:!0,type:"validation",errors:c})}try{if(await h.findOne({username:s}))return e.status(400).json({error:!0,type:"username_taken"});if(await h.findOne({email:o}))return e.status(400).json({error:!0,type:"email_taken"});let d=await ee.hash(r,10);await new h({username:s,password:d,email:o,name:i}).save();let A=te.sign({username:s},process.env.JWT_SECRET,{expiresIn:"1d"});await g.findOneAndUpdate({username:s},{lastActivity:Date.now()},{upsert:!0,new:!0}),e.status(201).json({token:A,success:!0})}catch(c){if(c instanceof _e&&c.code===11e3)return e.status(409).json({error:!0});e.status(500).json({error:!0})}},se=async(t,e)=>{if(!process.env.JWT_SECRET)return e.status(500).json({error:!0,type:"server_error",code:p.ENV_VARIABLE_NOT_DEFINED});try{let{username:s,password:r}=t.body,o=await h.findOne({username:s});if(o&&await ee.compare(r,o.password)){let i=te.sign({username:o.username},process.env.JWT_SECRET,{expiresIn:"30d"});return await g.findOneAndUpdate({username:s},{lastActivity:Date.now()},{upsert:!0,new:!0}),e.status(200).json({token:i})}else return e.status(401).json({error:!0,type:"invalid_credentials"})}catch(s){return a.error(s),e.status(500).send("Server error")}},ne=async(t,e)=>{try{let s=t.headers.authorization?.split(" ")[1];return await q(s),e.sendStatus(204)}catch(s){let r="Server error";return s instanceof Error&&(r+=s.message),a.error(r),e.sendStatus(401).json({error:!0,type:"server_error",code:p.INTERNAL_SERVER_ERROR})}};import we from"../node_modules/node-cron/src/node-cron.js";we.schedule("0 0 * * *",async()=>{try{let t=new Date(Date.now()-864e5),e=await g.deleteMany({lastActivity:{$lt:t}});a.info(`${new Date().toISOString()} - Cleaned up ${e.deletedCount} expired sessions.`)}catch(t){a.error(`${new Date().toISOString()} - Error cleaning up expired sessions:`,t)}});Ee.config();var u=De();u.use(Se());u.use(Ie.json());var oe=process.env.PORT||4e3;process.env.MONGODB_URI?Ae.connect(process.env.MONGODB_URI).then(()=>{a.info("MongoDB connected")}).catch(t=>a.log(t)):a.info("MONGODB_URI not defined in env");u.get("/userHoldingsList",F);u.get("/api/holdings",f,R,H);u.post("/api/holdings",f,R,G);u.post("/api/upload",f,R,W);u.post("/api/indices",M);u.get("/api/indices",f,k);u.get("/api/market",f,V);u.post("/api/market",B);u.post("/api/register",b,re);u.post("/api/login",se);u.post("/api/logout",ne);u.get("/api/preference",f,R,Q);u.put("/api/preference",f,R,C);u.get("/api/user",f,R,Z);u.listen(oe,()=>{a.info(`Server is running on http://localhost:${oe}`)});
