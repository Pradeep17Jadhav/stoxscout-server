import be from"../node_modules/dotenv/lib/main.js";import xe from"../node_modules/express/index.js";import ke from"../node_modules/cors/lib/index.js";import Me from"../node_modules/body-parser/index.js";import $e from"../node_modules/mongoose/index.js";import ye from"../node_modules/jsonwebtoken/index.js";var j=(o=>(o[o.INTERNAL_SERVER_ERROR=1e3]="INTERNAL_SERVER_ERROR",o[o.TOKEN_NOT_DEFINED=1100]="TOKEN_NOT_DEFINED",o[o.TOKEN_EXPIRED=1101]="TOKEN_EXPIRED",o[o.INVALID_TOKEN=1102]="INVALID_TOKEN",o[o.UNAUTHORIZED=1103]="UNAUTHORIZED",o[o.NO_PERMISSION=1104]="NO_PERMISSION",o[o.INVALID_PASSWORD=1105]="INVALID_PASSWORD",o[o.INVALID_CREDENTIALS=1106]="INVALID_CREDENTIALS",o[o.SESSION_EXPIRED=1107]="SESSION_EXPIRED",o[o.SESSION_UNAVAILABLE=1108]="SESSION_UNAVAILABLE",o[o.FIELD_REQUIRED=1200]="FIELD_REQUIRED",o[o.INVALID_FIELD_FORMAT=1201]="INVALID_FIELD_FORMAT",o[o.MISSING_PARAMETER=1202]="MISSING_PARAMETER",o[o.INVALID_INPUT=1203]="INVALID_INPUT",o[o.TOO_MANY_REQUESTS=1204]="TOO_MANY_REQUESTS",o[o.RESOURCE_NOT_FOUND=1300]="RESOURCE_NOT_FOUND",o[o.RESOURCE_ALREADY_EXISTS=1301]="RESOURCE_ALREADY_EXISTS",o[o.ENV_VARIABLE_NOT_DEFINED=1400]="ENV_VARIABLE_NOT_DEFINED",o[o.MISSING_DATABASE_URL=1401]="MISSING_DATABASE_URL",o[o.MISSING_JWT_SECRET=1402]="MISSING_JWT_SECRET",o[o.EXTERNAL_API_ERROR=1500]="EXTERNAL_API_ERROR",o[o.EXTERNAL_API_UNAUTHORIZED=1501]="EXTERNAL_API_UNAUTHORIZED",o[o.MONGO_ERROR=1600]="MONGO_ERROR",o))(j||{}),d=j;var b=[],x=t=>{t&&b.push(t)},y=(t,e,s)=>{let r=t.headers.authorization?.split(" ")[1];if(!r)return e.status(401).json({error:!0,type:"unauthorized",message:"Please log in."});if(b.includes(r))return e.status(401).json({error:!0,type:"token_blacklisted"});if(!process.env.JWT_SECRET)return e.status(500).json({error:!0,type:"server_error",code:d.ENV_VARIABLE_NOT_DEFINED});ye.verify(r,process.env.JWT_SECRET,(n,i)=>{if(n)return n.name==="TokenExpiredError"?e.status(401).json({error:!0,type:"token_expired"}):e.status(401).json({error:!0,type:"invalid_token"});if(!i||typeof i!="object"||!("username"in i))return e.status(401).json({error:!0,type:"invalid_token"});t.user=i.username,s()})};import{body as S}from"../node_modules/express-validator/lib/index.js";var k=[S("name").isLength({min:6,max:50}).custom(t=>{if(!t)throw new Error("name_required");return!0}),S("username").isLength({min:6,max:30}).custom(t=>{if(!t)throw new Error("username_required");return!0}),S("email").isEmail().custom(t=>{if(!t)throw new Error("email_required");return!0}).normalizeEmail(),S("password").custom(t=>{let e=[];if(t?(t.length<8&&e.push("password_too_short"),/[a-z]/.test(t)||e.push("password_no_lowercase"),/[A-Z]/.test(t)||e.push("password_no_uppercase"),/[0-9]/.test(t)||e.push("password_no_number"),/[\W_]/.test(t)||e.push("password_no_special")):e.push("password_required"),e.length)throw new Error(e.join(","));return!0})];import he from"../node_modules/jsonwebtoken/index.js";import M from"../node_modules/mongoose/index.js";var ge=new M.Schema({username:{type:String,required:!0,unique:!0},lastActivity:{type:Date,required:!0},token:{type:String}}),Re=M.model("Session",ge),g=Re;import _ from"../node_modules/winston/lib/winston.js";var we=_.createLogger({level:"info",format:_.format.combine(_.format.colorize(),_.format.simple()),transports:[new _.transports.Console]}),a=we;var w=async(t,e,s)=>{let r=t.headers.authorization?.split(" ")[1];if(!r)return e.status(401).json({errror:!0,type:"unauthorized",code:d.MISSING_JWT_SECRET});if(!process.env.JWT_SECRET)return e.status(401).json({errror:!0,type:"unauthorized",code:d.ENV_VARIABLE_NOT_DEFINED});let n={error:!0,type:"server_error"};try{let c=he.verify(r,process.env.JWT_SECRET).username,p=await g.findOne({username:c});if(!p)return e.status(401).json({...n,code:d.SESSION_UNAVAILABLE});let l=new Date,m=24*60*60*1e3;if(l.getTime()-p.lastActivity.getTime()>m)return await g.deleteOne({username:c}),e.status(401).json({...n,code:d.SESSION_EXPIRED});p.lastActivity=l,await p.save(),s()}catch(i){return a.error(i),e.status(401).json({errorRes:n,code:d.INTERNAL_SERVER_ERROR})}};import $ from"../node_modules/mongoose/index.js";var L=new $.Schema({indexSymbol:{type:String,required:!0,trim:!0},current:{type:Number,required:!0},percentChange:{type:Number,required:!0},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}});L.pre("save",function(t){this.updatedAt=new Date,t()});var _e=$.model("Index",L,"indices"),O=_e;var U=async(t,e)=>{let s=["NIFTY 50","NIFTY BANK"];try{let r=await O.find({indexSymbol:{$in:s}}).lean().select("-_id -__v -createdAt -updatedAt");e.status(200).json(r)}catch(r){r instanceof Error&&e.status(500).json({error:r.message})}},B=async(t,e)=>{let s=t.body;try{await Promise.all(s.map(async r=>{await O.updateOne({indexSymbol:r.indexSymbol},{$set:{current:r.current,percentChange:r.percentChange,updatedAt:Date.now()},$setOnInsert:{createdAt:Date.now()}},{upsert:!0})})),e.status(200).json({message:"Indices data saved successfully!"})}catch(r){let n="Error saving indices data";return r instanceof Error&&(n+=r.message),a.error(n),e.status(500).json({message:"Error saving indices data"})}};import V from"../node_modules/mongoose/index.js";var G=new V.Schema({symbol:{type:String,required:!0,trim:!0},lastPrice:{type:Number,required:!0},change:{type:Number,required:!0},pChange:{type:Number,required:!0},previousClose:{type:Number,required:!0},open:{type:Number,required:!0},close:{type:Number,required:!0},basePrice:{type:Number,required:!0},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}});G.pre("save",function(t){this.updatedAt=new Date,t()});var De=V.model("MarketData",G,"marketdata"),N=De;var F=async(t,e)=>{let s=t.body;try{await Promise.all(s.map(async r=>{await N.updateOne({symbol:r.symbol},{$set:{lastPrice:r.lastPrice,change:r.change,pChange:r.pChange,previousClose:r.previousClose,open:r.open,close:r.close,basePrice:r.basePrice,updatedAt:Date.now()},$setOnInsert:{createdAt:Date.now()}},{upsert:!0})})),e.status(200).json({message:"Data saved successfully!"})}catch(r){return e.status(500).json({message:"Error saving data",error:r})}};var W=async(t,e)=>{try{let s=await N.find({}).lean().select("-_id -__v -createdAt"),r=s.reduce((n,i)=>new Date(i.updatedAt)<new Date(n.updatedAt)?i:n);e.status(200).json({market:s,updatedAt:r.updatedAt})}catch(s){e.status(500).json({message:"Error retrieving market data",error:s})}};import q from"../node_modules/mongoose/index.js";var Se=new q.Schema({dateAdded:{type:Date,required:!0,get:t=>new Date(t)},quantity:{type:Number,required:!0},avgPrice:{type:Number,required:!0},exchange:{type:String,required:!0,trim:!0},isGift:{type:Boolean,required:!1},isIPO:{type:Boolean,required:!1}},{_id:!1}),H=new q.Schema({symbol:{type:String,required:!0,trim:!0},transactions:{type:[Se],required:!0},userId:{type:String,required:!0,trim:!0},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}});H.pre("save",function(t){this.updatedAt=new Date,t()});var Ie=q.model("Holding",H,"holdings"),h=Ie;import J from"../node_modules/mongoose/index.js";var z=new J.Schema({name:{type:String,required:!0,trim:!0},email:{type:String,required:!0,trim:!0,unique:!0},username:{type:String,required:!0,unique:!0,trim:!0,minlength:6,maxlength:50},password:{type:String,required:!0,minlength:6},lastLogin:{type:Date,default:Date.now},lastActivity:{type:Date,default:Date.now},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}});z.pre("save",function(t){this.updatedAt=new Date,t()});var Ae=J.model("User",z),f=Ae;var Q=async(t,e)=>{try{let s=await f.findOne({username:t.user});if(!s)return e.status(500).json({error:!0,message:"Server error"});s.lastActivity=new Date,await s.save();let r=await h.find({userId:t.user}).lean().select("-_id -__v -createdAt -updatedAt -userId");if(!r)return e.status(404).json({message:"No holdings found for this user."});if(r.length===0)return e.status(200).json([]);let n=r.map(i=>({...i,transactions:i.transactions.map(c=>({...c,dateAdded:new Date(c.dateAdded).getTime()}))}));e.json(n)}catch(s){a.error(s),e.status(500).json({message:"Server error while fetching holdings",error:s})}},X=async(t,e)=>{try{let s=await h.distinct("symbol");if(!s||s.length===0)return e.status(200).json({nse:[]});let r={nse:s};return e.json(r)}catch(s){return e.status(500).json(s)}},Y=async(t,e)=>{let{symbol:s,dateAdded:r,quantity:n,avgPrice:i,exchange:c="NSE",isGift:p=!1,isIPO:l=!1}=t.body;try{let m={dateAdded:new Date(r),quantity:n,avgPrice:i,exchange:c,isGift:p,isIPO:l},R=await h.findOne({symbol:s,userId:t.user});R?R.transactions.push(m):R=new h({symbol:s,transactions:[m],userId:t.user}),await R.save(),e.status(200).send({message:`Holding ${s} added successfully!`})}catch(m){a.error(m),e.status(500).send(`Server error while adding holding, ${m}`)}},K=async(t,e)=>{let s=t.body;if(!Array.isArray(s)||s.length===0)return e.status(400).send("Invalid data. Expected an array of holdings.");let r=s.map(n=>{let{symbol:i,dateAdded:c,quantity:p,avgPrice:l,exchange:m="NSE",isGift:R=!1,isIPO:T=!1}=n;return{updateOne:{filter:{symbol:i,userId:t.user},update:{$setOnInsert:{symbol:i,userId:t.user,createdAt:Date.now()},$push:{transactions:{dateAdded:new Date(c),quantity:p,avgPrice:l,exchange:m,isGift:R,isIPO:T}},$set:{updatedAt:Date.now()}},upsert:!0}}});try{let n=await h.bulkWrite(r);e.status(200).json({message:`Holdings uploaded successfully! Inserted: ${n.upsertedCount}, Modified: ${n.modifiedCount}`})}catch(n){a.error(n),e.status(500).send(`Server error while uploading holdings, ${n}`)}};import{MongoError as ee}from"../node_modules/mongodb/lib/index.js";import I from"../node_modules/mongoose/index.js";var ve=new I.Schema({visibleColumns:{type:[Number],default:[]},sortColumn:{type:Number,default:1},sortOrder:{type:Number,default:1}},{_id:!1}),Z=new I.Schema({dashboard:{type:ve}},{_id:!1}),C=new I.Schema({mobile:{type:Z},computer:{type:Z},theme:{type:Number,required:!1},userId:{type:String,required:!0,trim:!0},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}});C.pre("save",function(t){this.updatedAt=new Date,t()});var Ee=I.model("Preference",C),A=Ee;var te=async(t,e)=>{let s=t.user;try{let r=await f.findOne({username:s});if(!r)return e.status(404).json({error:!0,type:"user_not_found"});e.status(200).json({name:r.name})}catch(r){return a.error(r),e.status(500).json({error:!0,type:"server_error"})}},re=async(t,e)=>{let s=t.user;try{let r=await A.findOne({userId:s})?.lean().select("-_id -__v -createdAt -updatedAt -userId");if(!r)return e.status(200).json({});e.status(200).json(r)}catch(r){return a.error(r),r instanceof ee&&r.name==="CastError"?e.status(400).json({error:!0,type:"invalid_user_id"}):e.status(500).json({error:!0,type:"server_error"})}},se=async(t,e)=>{let s=t.body,r=t.user;try{let n=await A.findOne({userId:r});n?(n.set(s),n.updatedAt=new Date):n=new A({userId:r,...s,createdAt:Date.now(),updatedAt:Date.now()}),await n.save(),e.status(200).send({message:"Preferences updated successfully!"})}catch(n){if(a.error(n),n instanceof ee){if(n.name==="ValidationError")return e.status(400).json({error:!0,type:"invalid_data",code:d.MONGO_ERROR});if(n.name==="CastError")return e.status(400).json({error:!0,type:"invalid_user_id",code:d.MONGO_ERROR});if(n.code===11e3)return e.status(409).json({error:!0,type:"duplicate_preferences",code:d.MONGO_ERROR})}return e.status(500).json({error:!0,type:"server_error"})}};import Te from"../node_modules/mongoose/index.js";var Oe=async(t,e)=>{if(!t||e<=0)throw new Error("Invalid symbol or multiplier");await Te.connection.collection("holdings").updateMany({symbol:t},[{$set:{transactions:{$map:{input:"$transactions",as:"transaction",in:{dateAdded:"$$transaction.dateAdded",quantity:{$multiply:["$$transaction.quantity",e]},avgPrice:{$divide:["$$transaction.avgPrice",e]},exchange:"$$transaction.exchange",isGift:"$$transaction.isGift",isIPO:"$$transaction.isIPO"}}}}}]),a.info(`Successfully updated holdings of symbol ${t} with multiplier ${e}`)},ne=async(t,e)=>{let{symbol:s,multiplier:r}=t.body;try{await Oe(s,r),e.status(200).json({success:!0,symbol:s,multiplier:r})}catch(n){e.status(500).json({success:!1,message:n})}};import{validationResult as qe}from"../node_modules/express-validator/lib/index.js";import P from"../node_modules/bcrypt/bcrypt.js";import E from"../node_modules/jsonwebtoken/index.js";import{MongoError as Pe}from"../node_modules/mongodb/lib/index.js";import Ne from"../node_modules/nodemailer/lib/nodemailer.js";var v,oe=!1,ae=()=>{process.env.GMAIL_ID&&process.env.GMAIL_PASSWORD&&(v=Ne.createTransport({service:"gmail",auth:{user:process.env.GMAIL_ID,pass:process.env.GMAIL_PASSWORD}}),v.verify(t=>{t?a.error("Error verifying transporter:",t):(oe=!0,a.info("Transporter is ready to send emails"))}))},ie=async(t,e,s)=>{if(!v||!oe)throw new Error("Transporter is not ready");let r={from:process.env.GMAIL_ID,to:t,subject:e,text:s};try{await v.sendMail(r)}catch(n){throw a.log("Error sending OTP:",n),n}};var D=[];setInterval(()=>{let t=new Date;D=D.filter(e=>e.expires>t)},60*60*1e3);var ue=async(t,e)=>{let{username:s,password:r,email:n,name:i}=t.body,c=qe(t);if(!process.env.JWT_SECRET)return e.status(500).json({error:!0,type:"server_error",code:d.ENV_VARIABLE_NOT_DEFINED});if(!c.isEmpty()){let p=c.array().flatMap(l=>l.msg.includes(",")?l.msg.split(",").map(m=>({type:m})):[{type:l.msg}]);return e.status(400).json({error:!0,type:"validation",errors:p})}try{if(await f.findOne({username:s}))return e.status(400).json({error:!0,type:"username_taken"});if(await f.findOne({email:n}))return e.status(400).json({error:!0,type:"email_taken"});let m=await P.hash(r,10);await new f({username:s,password:m,email:n,name:i}).save();let T=E.sign({username:s},process.env.JWT_SECRET,{expiresIn:"1d"});await g.findOneAndUpdate({username:s},{lastActivity:Date.now()},{upsert:!0,new:!0}),e.status(201).json({token:T,success:!0})}catch(p){if(p instanceof Pe&&p.code===11e3)return e.status(409).json({error:!0});e.status(500).json({error:!0})}},ce=async(t,e)=>{if(!process.env.JWT_SECRET)return e.status(500).json({error:!0,type:"server_error",code:d.ENV_VARIABLE_NOT_DEFINED});try{let{username:s,password:r}=t.body,n=await f.findOne({username:s});if(n&&await P.compare(r,n.password)){let i=E.sign({username:n.username},process.env.JWT_SECRET,{expiresIn:"30d"});return await g.findOneAndUpdate({username:s},{lastActivity:Date.now()},{upsert:!0,new:!0}),n.lastActivity=new Date,n.lastLogin=new Date,await n.save(),e.status(200).json({token:i})}else return e.status(401).json({error:!0,type:"invalid_credentials"})}catch(s){return a.error(s),e.status(500).send("Server error")}},pe=async(t,e)=>{try{let s=t.headers.authorization?.split(" ")[1];return await x(s),e.sendStatus(204)}catch(s){let r="Server error";return s instanceof Error&&(r+=s.message),a.error(r),e.sendStatus(401).json({error:!0,type:"server_error",code:d.INTERNAL_SERVER_ERROR})}},de=async(t,e)=>{let{email:s}=t.body;if(!await f.findOne({email:s}))return e.status(404).json({error:!0,type:"user_not_found"});let n=Math.floor(1e5+Math.random()*9e5),i="Your Password Reset Request",c=`Use OTP ${n} to update your login credentials at MagnyFire! The OTP expires in 15 minutes.`;try{await ie(s,i,c);let p=new Date(Date.now()+15*60*1e3);return D.push({email:s,otp:n,expires:p}),e.status(200).json({success:!0})}catch{return e.status(500).json({success:!1,message:"cannot_send_otp"})}},me=async(t,e)=>{let{email:s,otp:r}=t.body,n=D.findIndex(c=>c.email===s&&c.otp===r);if(n===-1)return e.status(400).json({success:!1,message:"incorrect_otp"});if(!process.env.JWT_SECRET)return e.status(500).json({error:!0,type:"server_error"});D.splice(n,1);let i=E.sign({email:s},process.env.JWT_SECRET,{expiresIn:"15m"});return e.status(200).json({success:!0,resetToken:i})},le=async(t,e)=>{let{resetToken:s,newPassword:r}=t.body;if(!process.env.JWT_SECRET)return e.status(500).json({error:!0,type:"server_error"});try{let n=E.verify(s,process.env.JWT_SECRET),{email:i}=n,c=await P.hash(r,10);return await f.findOneAndUpdate({email:i},{password:c})?e.status(200).json({success:!0,message:"password_updated"}):e.status(404).json({success:!1,message:"user_not_found"})}catch{return e.status(400).json({success:!1,message:"invalid_or_expired_token"})}};import je from"../node_modules/node-cron/src/node-cron.js";je.schedule("0 0 * * *",async()=>{try{let t=new Date(Date.now()-864e5),e=await g.deleteMany({lastActivity:{$lt:t}});a.info(`${new Date().toISOString()} - Cleaned up ${e.deletedCount} expired sessions.`)}catch(t){a.error(`${new Date().toISOString()} - Error cleaning up expired sessions:`,t)}});be.config();var u=xe();u.use(ke());u.use(Me.json());ae();var fe=process.env.PORT||4e3;process.env.MONGODB_URI?$e.connect(process.env.MONGODB_URI).then(()=>{a.info("MongoDB connected")}).catch(t=>a.error(t)):a.info("MONGODB_URI not defined in env");u.get("/userHoldingsList",X);u.get("/api/holdings",y,w,Q);u.post("/api/holdings",y,w,Y);u.post("/api/upload",y,w,K);u.post("/api/indices",B);u.get("/api/indices",y,U);u.get("/api/market",y,W);u.post("/api/market",F);u.post("/api/register",k,ue);u.post("/api/login",ce);u.post("/api/logout",pe);u.get("/api/preference",y,w,re);u.put("/api/preference",y,w,se);u.get("/api/user",y,w,te);u.post("/api/forgotPassword",de);u.post("/api/verifyOtp",me);u.post("/api/updatePassword",le);u.post("/api/multiplyQuantity",ne);u.listen(fe,()=>{a.info(`Server is running on http://localhost:${fe}`)});
