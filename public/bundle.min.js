import be from"../node_modules/dotenv/lib/main.js";import ke from"../node_modules/express/index.js";import Me from"../node_modules/cors/lib/index.js";import $e from"../node_modules/body-parser/index.js";import Le from"../node_modules/mongoose/index.js";import ge from"../node_modules/jsonwebtoken/index.js";var j=(o=>(o[o.INTERNAL_SERVER_ERROR=1e3]="INTERNAL_SERVER_ERROR",o[o.TOKEN_NOT_DEFINED=1100]="TOKEN_NOT_DEFINED",o[o.TOKEN_EXPIRED=1101]="TOKEN_EXPIRED",o[o.INVALID_TOKEN=1102]="INVALID_TOKEN",o[o.UNAUTHORIZED=1103]="UNAUTHORIZED",o[o.NO_PERMISSION=1104]="NO_PERMISSION",o[o.INVALID_PASSWORD=1105]="INVALID_PASSWORD",o[o.INVALID_CREDENTIALS=1106]="INVALID_CREDENTIALS",o[o.SESSION_EXPIRED=1107]="SESSION_EXPIRED",o[o.SESSION_UNAVAILABLE=1108]="SESSION_UNAVAILABLE",o[o.FIELD_REQUIRED=1200]="FIELD_REQUIRED",o[o.INVALID_FIELD_FORMAT=1201]="INVALID_FIELD_FORMAT",o[o.MISSING_PARAMETER=1202]="MISSING_PARAMETER",o[o.INVALID_INPUT=1203]="INVALID_INPUT",o[o.TOO_MANY_REQUESTS=1204]="TOO_MANY_REQUESTS",o[o.RESOURCE_NOT_FOUND=1300]="RESOURCE_NOT_FOUND",o[o.RESOURCE_ALREADY_EXISTS=1301]="RESOURCE_ALREADY_EXISTS",o[o.ENV_VARIABLE_NOT_DEFINED=1400]="ENV_VARIABLE_NOT_DEFINED",o[o.MISSING_DATABASE_URL=1401]="MISSING_DATABASE_URL",o[o.MISSING_JWT_SECRET=1402]="MISSING_JWT_SECRET",o[o.EXTERNAL_API_ERROR=1500]="EXTERNAL_API_ERROR",o[o.EXTERNAL_API_UNAUTHORIZED=1501]="EXTERNAL_API_UNAUTHORIZED",o[o.MONGO_ERROR=1600]="MONGO_ERROR",o))(j||{}),l=j;var x=[],b=t=>{t&&x.push(t)},g=(t,e,r)=>{let s=t.headers.authorization?.split(" ")[1];if(!s)return e.status(401).json({error:!0,type:"unauthorized",message:"Please log in."});if(x.includes(s))return e.status(401).json({error:!0,type:"token_blacklisted"});if(!process.env.JWT_SECRET)return e.status(500).json({error:!0,type:"server_error",code:l.ENV_VARIABLE_NOT_DEFINED});ge.verify(s,process.env.JWT_SECRET,(n,a)=>{if(n)return n.name==="TokenExpiredError"?e.status(401).json({error:!0,type:"token_expired"}):e.status(401).json({error:!0,type:"invalid_token"});if(!a||typeof a!="object"||!("username"in a))return e.status(401).json({error:!0,type:"invalid_token"});t.user=a.username,r()})};import{body as I}from"../node_modules/express-validator/lib/index.js";var k=[I("name").isLength({min:6,max:50}).custom(t=>{if(!t)throw new Error("name_required");return!0}),I("username").isLength({min:6,max:30}).custom(t=>{if(!t)throw new Error("username_required");return!0}),I("email").isEmail().custom(t=>{if(!t)throw new Error("email_required");return!0}).normalizeEmail(),I("password").custom(t=>{let e=[];if(t?(t.length<8&&e.push("password_too_short"),/[a-z]/.test(t)||e.push("password_no_lowercase"),/[A-Z]/.test(t)||e.push("password_no_uppercase"),/[0-9]/.test(t)||e.push("password_no_number"),/[\W_]/.test(t)||e.push("password_no_special")):e.push("password_required"),e.length)throw new Error(e.join(","));return!0})];import he from"../node_modules/jsonwebtoken/index.js";import M from"../node_modules/mongoose/index.js";var we=new M.Schema({username:{type:String,required:!0,unique:!0},lastActivity:{type:Date,required:!0},token:{type:String}}),Re=M.model("Session",we),w=Re;import D from"../node_modules/winston/lib/winston.js";var _e=D.createLogger({level:"info",format:D.format.combine(D.format.colorize(),D.format.simple()),transports:[new D.transports.Console]}),u=_e;var R=async(t,e,r)=>{let s=t.headers.authorization?.split(" ")[1];if(!s)return e.status(401).json({errror:!0,type:"unauthorized",code:l.MISSING_JWT_SECRET});if(!process.env.JWT_SECRET)return e.status(401).json({errror:!0,type:"unauthorized",code:l.ENV_VARIABLE_NOT_DEFINED});let n={error:!0,type:"server_error"};try{let d=he.verify(s,process.env.JWT_SECRET).username,i=await w.findOne({username:d});if(!i)return e.status(401).json({...n,code:l.SESSION_UNAVAILABLE});let c=new Date,m=24*60*60*1e3;if(c.getTime()-i.lastActivity.getTime()>m)return await w.deleteOne({username:d}),e.status(401).json({...n,code:l.SESSION_EXPIRED});i.lastActivity=c,await i.save(),r()}catch(a){return u.error(a),e.status(401).json({errorRes:n,code:l.INTERNAL_SERVER_ERROR})}};import $ from"../node_modules/mongoose/index.js";var L=new $.Schema({indexSymbol:{type:String,required:!0,trim:!0},current:{type:Number,required:!0},percentChange:{type:Number,required:!0},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}});L.pre("save",function(t){this.updatedAt=new Date,t()});var De=$.model("Index",L,"indices"),T=De;var U=async(t,e)=>{let r=["NIFTY 50","NIFTY BANK"];try{let s=await T.find({indexSymbol:{$in:r}}).lean().select("-_id -__v -createdAt -updatedAt");e.status(200).json(s)}catch(s){s instanceof Error&&e.status(500).json({error:s.message})}},B=async(t,e)=>{let r=t.body;try{await Promise.all(r.map(async s=>{await T.updateOne({indexSymbol:s.indexSymbol},{$set:{current:s.current,percentChange:s.percentChange,updatedAt:Date.now()},$setOnInsert:{createdAt:Date.now()}},{upsert:!0})})),e.status(200).json({message:"Indices data saved successfully!"})}catch(s){let n="Error saving indices data";return s instanceof Error&&(n+=s.message),u.error(n),e.status(500).json({message:"Error saving indices data"})}};import G from"../node_modules/mongoose/index.js";var V=new G.Schema({symbol:{type:String,required:!0,trim:!0},lastPrice:{type:Number,required:!0},change:{type:Number,required:!0},pChange:{type:Number,required:!0},previousClose:{type:Number,required:!0},open:{type:Number,required:!0},close:{type:Number,required:!0},basePrice:{type:Number,required:!0},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}});V.pre("save",function(t){this.updatedAt=new Date,t()});var Se=G.model("MarketData",V,"marketdata"),N=Se;var H=async(t,e)=>{let r=t.body;try{await Promise.all(r.map(async s=>{await N.updateOne({symbol:s.symbol},{$set:{lastPrice:s.lastPrice,change:s.change,pChange:s.pChange,previousClose:s.previousClose,open:s.open,close:s.close,basePrice:s.basePrice,updatedAt:Date.now()},$setOnInsert:{createdAt:Date.now()}},{upsert:!0})})),e.status(200).json({message:"Data saved successfully!"})}catch(s){return e.status(500).json({message:"Error saving data",error:s})}};var F=async(t,e)=>{try{let r=await N.find({}).lean().select("-_id -__v -createdAt"),s=r.reduce((n,a)=>new Date(a.updatedAt)<new Date(n.updatedAt)?a:n);e.status(200).json({market:r,updatedAt:s.updatedAt})}catch(r){e.status(500).json({message:"Error retrieving market data",error:r})}};import q from"../node_modules/mongoose/index.js";var Ie=new q.Schema({dateAdded:{type:Date,required:!0,get:t=>new Date(t)},quantity:{type:Number,required:!0},avgPrice:{type:Number,required:!0},exchange:{type:String,required:!0,trim:!0},isGift:{type:Boolean,required:!1},isIPO:{type:Boolean,required:!1}}),W=new q.Schema({symbol:{type:String,required:!0,trim:!0},transactions:{type:[Ie],required:!0},userId:{type:String,required:!0,trim:!0},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}});W.pre("save",function(t){this.updatedAt=new Date,t()});var Ae=q.model("Holding",W,"holdings"),_=Ae;import J from"../node_modules/mongoose/index.js";var z=new J.Schema({name:{type:String,required:!0,trim:!0},email:{type:String,required:!0,trim:!0,unique:!0},username:{type:String,required:!0,unique:!0,trim:!0,minlength:6,maxlength:50},password:{type:String,required:!0,minlength:6},lastLogin:{type:Date,default:Date.now},lastActivity:{type:Date,default:Date.now},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}});z.pre("save",function(t){this.updatedAt=new Date,t()});var ve=J.model("User",z),f=ve;var Q=async(t,e)=>{try{let r=await f.findOne({username:t.user});if(!r)return e.status(500).json({error:!0,message:"Server error"});r.lastActivity=new Date,await r.save();let s=await _.find({userId:t.user}).lean().select("-_id -__v -createdAt -updatedAt -userId");if(!s)return e.status(404).json({message:"No holdings found for this user."});if(s.length===0)return e.status(200).json([]);let n=s.map(a=>({...a,transactions:a.transactions.map(d=>({...d,dateAdded:new Date(d.dateAdded).getTime()}))}));e.json(n)}catch(r){u.error(r),e.status(500).json({message:"Server error while fetching holdings",error:r})}},X=async(t,e)=>{try{let r=await _.distinct("symbol");if(!r||r.length===0)return e.status(200).json({nse:[]});let s={nse:r};return e.json(s)}catch(r){return e.status(500).json(r)}},Y=async(t,e)=>{let{symbol:r,dateAdded:s,quantity:n,avgPrice:a,exchange:d="NSE",isGift:i=!1,isIPO:c=!1}=t.body;try{let m={dateAdded:new Date(s),quantity:n,avgPrice:a,exchange:d,isGift:i,isIPO:c},y=await _.findOne({symbol:r,userId:t.user});y?y.transactions.push(m):y=new _({symbol:r,transactions:[m],userId:t.user}),await y.save(),e.status(200).send({message:`Holding ${r} added successfully!`})}catch(m){u.error(m),e.status(500).send(`Server error while adding holding, ${m}`)}},K=async(t,e)=>{let r=t.body;if(!Array.isArray(r)||r.length===0)return e.status(400).send("Invalid data. Expected an array of holdings.");let s=r.map(n=>{let{symbol:a,dateAdded:d,quantity:i,avgPrice:c,exchange:m="NSE",isGift:y=!1,isIPO:h=!1}=n;return{updateOne:{filter:{symbol:a,userId:t.user},update:{$setOnInsert:{symbol:a,userId:t.user,createdAt:Date.now()},$push:{transactions:{dateAdded:new Date(d),quantity:i,avgPrice:c,exchange:m,isGift:y,isIPO:h}},$set:{updatedAt:Date.now()}},upsert:!0}}});try{let n=await _.bulkWrite(s);e.status(200).json({message:`Holdings uploaded successfully! Inserted: ${n.upsertedCount}, Modified: ${n.modifiedCount}`})}catch(n){u.error(n),e.status(500).send(`Server error while uploading holdings, ${n}`)}},Z=async(t,e)=>{let{symbol:r,updatedTransactions:s}=t.body;if(!r||!s)return e.status(500).json({error:!0,message:"incorrect_payload"});let n=t.user,a=0,d=0;try{let i=await _.findOne({symbol:r,userId:n});if(!i)return e.status(404).json({error:!0,message:"holding_not_found"});for(let{transaction:c,deleted:m}of s){let y=i.transactions.findIndex(h=>h._id.toString()===c._id);y!==-1&&(m?(i.transactions.splice(y,1),d+=1):(i.transactions[y].set({dateAdded:new Date(c.dateAdded),quantity:c.quantity,avgPrice:c.avgPrice,exchange:c.exchange,isGift:c.isGift,isIPO:c.isIPO}),a+=1))}if(i.transactions.length===0)return await i.deleteOne(),e.status(200).json({error:!1,message:"holding_deleted",deletedCount:d,updatedCount:a});i.updatedAt=new Date,await i.save(),e.status(200).json({error:!1,message:"holding_updated",deletedCount:d,updatedCount:a})}catch(i){console.error(i),e.status(500).json({error:!0})}};import{MongoError as te}from"../node_modules/mongodb/lib/index.js";import A from"../node_modules/mongoose/index.js";var Ee=new A.Schema({visibleColumns:{type:[Number],default:[]},sortColumn:{type:Number,default:1},sortOrder:{type:Number,default:1}},{_id:!1}),C=new A.Schema({dashboard:{type:Ee}},{_id:!1}),ee=new A.Schema({mobile:{type:C},computer:{type:C},theme:{type:Number,required:!1},userId:{type:String,required:!0,trim:!0},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}});ee.pre("save",function(t){this.updatedAt=new Date,t()});var Oe=A.model("Preference",ee),v=Oe;var re=async(t,e)=>{let r=t.user;try{let s=await f.findOne({username:r});if(!s)return e.status(404).json({error:!0,type:"user_not_found"});e.status(200).json({name:s.name})}catch(s){return u.error(s),e.status(500).json({error:!0,type:"server_error"})}},se=async(t,e)=>{let r=t.user;try{let s=await v.findOne({userId:r})?.lean().select("-_id -__v -createdAt -updatedAt -userId");if(!s)return e.status(200).json({});e.status(200).json(s)}catch(s){return u.error(s),s instanceof te&&s.name==="CastError"?e.status(400).json({error:!0,type:"invalid_user_id"}):e.status(500).json({error:!0,type:"server_error"})}},ne=async(t,e)=>{let r=t.body,s=t.user;try{let n=await v.findOne({userId:s});n?(n.set(r),n.updatedAt=new Date):n=new v({userId:s,...r,createdAt:Date.now(),updatedAt:Date.now()}),await n.save(),e.status(200).send({message:"Preferences updated successfully!"})}catch(n){if(u.error(n),n instanceof te){if(n.name==="ValidationError")return e.status(400).json({error:!0,type:"invalid_data",code:l.MONGO_ERROR});if(n.name==="CastError")return e.status(400).json({error:!0,type:"invalid_user_id",code:l.MONGO_ERROR});if(n.code===11e3)return e.status(409).json({error:!0,type:"duplicate_preferences",code:l.MONGO_ERROR})}return e.status(500).json({error:!0,type:"server_error"})}};import Te from"../node_modules/mongoose/index.js";var Ne=async(t,e)=>{if(!t||e<=0)throw new Error("Invalid symbol or multiplier");await Te.connection.collection("holdings").updateMany({symbol:t},[{$set:{transactions:{$map:{input:"$transactions",as:"transaction",in:{dateAdded:"$$transaction.dateAdded",quantity:{$multiply:["$$transaction.quantity",e]},avgPrice:{$divide:["$$transaction.avgPrice",e]},exchange:"$$transaction.exchange",isGift:"$$transaction.isGift",isIPO:"$$transaction.isIPO"}}}}}]),u.info(`Successfully updated holdings of symbol ${t} with multiplier ${e}`)},oe=async(t,e)=>{let{symbol:r,multiplier:s}=t.body;try{await Ne(r,s),e.status(200).json({success:!0,symbol:r,multiplier:s})}catch(n){e.status(500).json({success:!1,message:n})}};import{validationResult as Pe}from"../node_modules/express-validator/lib/index.js";import P from"../node_modules/bcrypt/bcrypt.js";import O from"../node_modules/jsonwebtoken/index.js";import{MongoError as je}from"../node_modules/mongodb/lib/index.js";import qe from"../node_modules/nodemailer/lib/nodemailer.js";var E,ae=!1,ie=()=>{process.env.GMAIL_ID&&process.env.GMAIL_PASSWORD&&(E=qe.createTransport({service:"gmail",auth:{user:process.env.GMAIL_ID,pass:process.env.GMAIL_PASSWORD}}),E.verify(t=>{t?u.error("Error verifying transporter:",t):(ae=!0,u.info("Transporter is ready to send emails"))}))},ue=async(t,e,r)=>{if(!E||!ae)throw new Error("Transporter is not ready");let s={from:process.env.GMAIL_ID,to:t,subject:e,text:r};try{await E.sendMail(s)}catch(n){throw u.log("Error sending OTP:",n),n}};var S=[];setInterval(()=>{let t=new Date;S=S.filter(e=>e.expires>t)},60*60*1e3);var de=async(t,e)=>{let{username:r,password:s,email:n,name:a}=t.body,d=Pe(t);if(!process.env.JWT_SECRET)return e.status(500).json({error:!0,type:"server_error",code:l.ENV_VARIABLE_NOT_DEFINED});if(!d.isEmpty()){let i=d.array().flatMap(c=>c.msg.includes(",")?c.msg.split(",").map(m=>({type:m})):[{type:c.msg}]);return e.status(400).json({error:!0,type:"validation",errors:i})}try{if(await f.findOne({username:r}))return e.status(400).json({error:!0,type:"username_taken"});if(await f.findOne({email:n}))return e.status(400).json({error:!0,type:"email_taken"});let m=await P.hash(s,10);await new f({username:r,password:m,email:n,name:a}).save();let h=O.sign({username:r},process.env.JWT_SECRET,{expiresIn:"1d"});await w.findOneAndUpdate({username:r},{lastActivity:Date.now()},{upsert:!0,new:!0}),e.status(201).json({token:h,success:!0})}catch(i){if(i instanceof je&&i.code===11e3)return e.status(409).json({error:!0});e.status(500).json({error:!0})}},ce=async(t,e)=>{if(!process.env.JWT_SECRET)return e.status(500).json({error:!0,type:"server_error",code:l.ENV_VARIABLE_NOT_DEFINED});try{let{username:r,password:s}=t.body,n=await f.findOne({username:r});if(n&&await P.compare(s,n.password)){let a=O.sign({username:n.username},process.env.JWT_SECRET,{expiresIn:"30d"});return await w.findOneAndUpdate({username:r},{lastActivity:Date.now()},{upsert:!0,new:!0}),n.lastActivity=new Date,n.lastLogin=new Date,await n.save(),e.status(200).json({token:a})}else return e.status(401).json({error:!0,type:"invalid_credentials"})}catch(r){return u.error(r),e.status(500).send("Server error")}},pe=async(t,e)=>{try{let r=t.headers.authorization?.split(" ")[1];return await b(r),e.sendStatus(204)}catch(r){let s="Server error";return r instanceof Error&&(s+=r.message),u.error(s),e.sendStatus(401).json({error:!0,type:"server_error",code:l.INTERNAL_SERVER_ERROR})}},me=async(t,e)=>{let{emailOrUsername:r}=t.body,s=r.indexOf("@")!==-1&&r.indexOf(".")!==-1,n=await f.findOne({...s?{email:r}:{username:r}});if(!n)return e.status(404).json({error:!0,type:"user_not_found"});let a=n.email,d=Math.floor(1e5+Math.random()*9e5),i="Your Password Reset Request",c=`Use OTP ${d} to update your login credentials at MagnyFire! The OTP expires in 15 minutes.`;try{await ue(a,i,c);let m=new Date(Date.now()+15*60*1e3);return S.push({email:a,otp:d,expires:m}),e.status(200).json({success:!0})}catch{return e.status(500).json({success:!1,message:"cannot_send_otp"})}},le=async(t,e)=>{let{emailOrUsername:r,otp:s}=t.body,n=r.indexOf("@")!==-1&&r.indexOf(".")!==-1,a=await f.findOne({...n?{email:r}:{username:r}});if(!a)return e.status(404).json({error:!0,type:"user_not_found"});let d=a.email,i=S.findIndex(m=>m.email===d&&m.otp===s);if(i===-1)return e.status(400).json({success:!1,message:"incorrect_otp"});if(!process.env.JWT_SECRET)return e.status(500).json({error:!0,type:"server_error"});S.splice(i,1);let c=O.sign({email:d,updatedAt:a.updatedAt},process.env.JWT_SECRET,{expiresIn:"15m"});return e.status(200).json({success:!0,resetToken:c})},fe=async(t,e)=>{let{resetToken:r,newPassword:s}=t.body;if(!process.env.JWT_SECRET)return e.status(500).json({error:!0,type:"server_error"});try{let{email:n,updatedAt:a}=O.verify(r,process.env.JWT_SECRET),d=await f.findOne({email:n});if(!d)return e.status(404).json({success:!1,message:"user_not_found"});if(d.updatedAt!==a)return e.status(500).json({success:!1,message:"reset_token_expired"});let i=await P.hash(s,10);return d.password=i,d.updatedAt=new Date,await d.save(),e.status(200).json({success:!0,message:"password_updated"})}catch{return e.status(400).json({success:!1,message:"invalid_or_expired_token"})}};import xe from"../node_modules/node-cron/src/node-cron.js";xe.schedule("0 0 * * *",async()=>{try{let t=new Date(Date.now()-864e5),e=await w.deleteMany({lastActivity:{$lt:t}});u.info(`${new Date().toISOString()} - Cleaned up ${e.deletedCount} expired sessions.`)}catch(t){u.error(`${new Date().toISOString()} - Error cleaning up expired sessions:`,t)}});be.config();var p=ke();p.use(Me());p.use($e.json());ie();var ye=process.env.PORT||4e3;process.env.MONGODB_URI?Le.connect(process.env.MONGODB_URI).then(()=>{u.info("MongoDB connected")}).catch(t=>u.error(t)):u.info("MONGODB_URI not defined in env");p.get("/userHoldingsList",X);p.get("/api/holdings",g,R,Q);p.post("/api/holdings",g,R,Y);p.post("/api/editHolding",g,R,Z);p.post("/api/upload",g,R,K);p.post("/api/indices",B);p.get("/api/indices",g,U);p.get("/api/market",g,F);p.post("/api/market",H);p.post("/api/register",k,de);p.post("/api/login",ce);p.post("/api/logout",pe);p.get("/api/preference",g,R,se);p.put("/api/preference",g,R,ne);p.get("/api/user",g,R,re);p.post("/api/forgotPassword",me);p.post("/api/verifyOtp",le);p.post("/api/updatePassword",fe);p.post("/api/multiplyQuantity",oe);p.listen(ye,()=>{u.info(`Server is running on http://localhost:${ye}`)});
